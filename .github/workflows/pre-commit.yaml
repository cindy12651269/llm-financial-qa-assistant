name: Lint and format # Workflow name shown in GitHub Actions UI

on: [pull_request] # Trigger only on pull request events (e.g., open, sync, rebase)

jobs:
  run-linters: # Job name
    name: Run linters # Display name in GitHub Actions UI
    runs-on: ubuntu-latest # Use the latest stable Ubuntu runner

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4 # Check out the code from the PR
      with:
        ref: ${{ github.event.pull_request.head.ref }} # Use PR head branch reference
        repository: ${{ github.event.pull_request.head.repo.full_name }} # PR source repo

    - name: Set up Python 3.10
      uses: actions/setup-python@v5 # Set up a Python interpreter
      with:
          python-version: '3.10' # Use Python 3.10
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
          virtualenvs-in-project: true  # .venv in project root
    
    - name: Cache virtualenv
      uses: actions/cache@v4
      with:
        path: .venv  # Cache the entire virtualenv directory
        key: venv-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-
    
    - name: Install dependencies with Poetry
      # Only install if cache didn't hit
      if: steps.cache.outputs.cache-hit != 'true'
      run: poetry install --no-root --no-interaction

    - name: Changed files # Step to get all changed files in this PR
      id: changed_files
      uses: jitterbit/get-changed-files@v1 # This action identifies changed files and outputs them
    
    - name: Run ruff fix (optional auto-format)
      run: poetry run ruff check --fix . # Run ruff to check and optionally auto-format code

    - uses: pre-commit/action@v3.0.1 # Run pre-commit hooks (e.g., black, flake8, isort)
      with:
        extra_args: --files ${{ steps.changed_files.outputs.all }}
        # Only run pre-commit on changed files (not entire repo)
      continue-on-error: true # Allow ruff or pre-commit fixes to apply without failing CI
