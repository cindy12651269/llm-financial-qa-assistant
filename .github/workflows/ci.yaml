name: CI  # Workflow name as it appears in GitHub Actions UI

on:  # Trigger conditions for the workflow
  push:
    branches:  # Trigger only when pushing to the 'main' branch
      - "main"
    paths:  # Only run if files in these paths are changed
      - "chatbot/**"
      - "tests/**"
      - ".github/workflows/**"
  pull_request:  # Trigger on PR events (open, sync, etc.)
    types: [opened, reopened, synchronize, ready_for_review]
    paths:
      - "chatbot/**"
      - "tests/**"
      - ".github/workflows/**"

jobs:
  test:  # Job name is 'test'
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    timeout-minutes: 10  # Fail early if job takes too long

    steps:
    
      - name: Checkout
        uses: actions/checkout@v4  # Clone repository code
        with:
          fetch-depth: 1  # Shallow clone for speed

      - name: Install Python
        uses: actions/setup-python@v5  # Set up Python runtime
        with:
          python-version: '3.10.6'
          cache: 'poetry'  # Enable Poetry dependency caching

      - name: Get poetry version
        id: poetry-version
        run: echo "poetry-version=$(cat version/poetry)" >> "$GITHUB_OUTPUT"
        # Reads Poetry version from file and makes it available to later steps

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ steps.poetry-version.outputs.poetry-version }}
          virtualenvs-in-project: true  # Create .venv in project directory

      - name: Get llama-cpp version
        id: llama-cpp-version
        run: echo "llama-cpp-version=$(cat version/llama_cpp)" >> "$GITHUB_OUTPUT"
        # Reads llama-cpp-python version from file

      - name: Cache virtualenv and dependencies
        uses: actions/cache@v3
        with:
          path: |
            .venv
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Setup environment
        # Ensure lockfile is up to date, install all deps (no local build)
        # Activate virtualenv and install llama-cpp manually
        run: |
          poetry lock --check  
          poetry install --no-root --no-ansi   
          . .venv/bin/activate && pip3 install llama-cpp-python==${{ steps.llama-cpp-version.outputs.llama-cpp-version }}

      - name: Run tests
        # Run all tests with compact output
        run: |
          poetry run pytest tests/ --tb=short -q
        

